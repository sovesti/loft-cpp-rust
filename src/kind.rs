/* 
   Copyright (c) 2022 ArSysOp.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
  
       http:  www.apache.org/licenses/LICENSE-2.0
  
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
  
   SPDX-License-Identifier: Apache-2.0
  
   Contributors:
     ArSysOp - initial API and implementation
*/

use clang::EntityKind::*;
use clang::EntityKind;

pub fn get_kind_label(kind_name: EntityKind) -> String {
    match kind_name {
        UnexposedDecl => String::from("UnexposedDecl"),
        StructDecl => String::from("StructDecl"),
        UnionDecl => String::from("UnionDecl"),
        ClassDecl => String::from("ClassDecl"),
        EnumDecl => String::from("EnumDecl"),
        FieldDecl => String::from("FieldDecl"),
        EnumConstantDecl => String::from("EnumConstantDecl"),
        FunctionDecl => String::from("FunctionDecl"),
        VarDecl => String::from("VarDecl"),
        ParmDecl => String::from("ParmDecl"),
        ObjCInterfaceDecl => String::from("ObjCInterfaceDecl"),
        ObjCCategoryDecl => String::from("ObjCCategoryDecl"),
        ObjCProtocolDecl => String::from("ObjCProtocolDecl"),
        ObjCPropertyDecl => String::from("ObjCPropertyDecl"),
        ObjCIvarDecl => String::from("ObjCIvarDecl"),
        ObjCInstanceMethodDecl => String::from("ObjCInstanceMethodDecl"),
        ObjCClassMethodDecl => String::from("ObjCClassMethodDecl"),
        ObjCImplementationDecl => String::from("ObjCImplementationDecl"),
        ObjCCategoryImplDecl => String::from("ObjCCategoryImplDecl"),
        TypedefDecl => String::from("TypedefDecl"),
        Method => String::from("Method"),
        Namespace => String::from("Namespace"),
        LinkageSpec => String::from("LinkageSpec"),
        Constructor => String::from("Constructor"),
        Destructor => String::from("Destructor"),
        ConversionFunction => String::from("ConversionFunction"),
        TemplateTypeParameter => String::from("TemplateTypeParameter"),
        NonTypeTemplateParameter => String::from("NonTypeTemplateParameter"),
        TemplateTemplateParameter => String::from("TemplateTemplateParameter"),
        FunctionTemplate => String::from("FunctionTemplate"),
        ClassTemplate => String::from("ClassTemplate"),
        ClassTemplatePartialSpecialization => String::from("ClassTemplatePartialSpecialization"),
        NamespaceAlias => String::from("NamespaceAlias"),
        UsingDirective => String::from("UsingDirective"),
        UsingDeclaration => String::from("UsingDeclaration"),
        TypeAliasDecl => String::from("TypeAliasDecl"),
        ObjCSynthesizeDecl => String::from("ObjCSynthesizeDecl"),
        ObjCDynamicDecl => String::from("ObjCDynamicDecl"),
        AccessSpecifier => String::from("AccessSpecifier"),
        ObjCSuperClassRef => String::from("ObjCSuperClassRef"),
        ObjCProtocolRef => String::from("ObjCProtocolRef"),
        ObjCClassRef => String::from("ObjCClassRef"),
        TypeRef => String::from("TypeRef"),
        BaseSpecifier => String::from("BaseSpecifier"),
        TemplateRef => String::from("TemplateRef"),
        NamespaceRef => String::from("NamespaceRef"),
        MemberRef => String::from("MemberRef"),
        LabelRef => String::from("LabelRef"),
        OverloadedDeclRef => String::from("OverloadedDeclRef"),
        VariableRef => String::from("VariableRef"),
        InvalidFile => String::from("InvalidFile"),
        InvalidDecl => String::from("InvalidDecl"),
        NotImplemented => String::from("NotImplemented"),
        InvalidCode => String::from("InvalidCode"),
        UnexposedExpr => String::from("UnexposedExpr"),
        DeclRefExpr => String::from("DeclRefExpr"),
        MemberRefExpr => String::from("MemberRefExpr"),
        CallExpr => String::from("CallExpr"),
        ObjCMessageExpr => String::from("ObjCMessageExpr"),
        BlockExpr => String::from("BlockExpr"),
        IntegerLiteral => String::from("IntegerLiteral"),
        FloatingLiteral => String::from("FloatingLiteral"),
        ImaginaryLiteral => String::from("ImaginaryLiteral"),
        StringLiteral => String::from("StringLiteral"),
        CharacterLiteral => String::from("CharacterLiteral"),
        ParenExpr => String::from("ParenExpr"),
        UnaryOperator => String::from("UnaryOperator"),
        ArraySubscriptExpr => String::from("ArraySubscriptExpr"),
        BinaryOperator => String::from("BinaryOperator"),
        CompoundAssignOperator => String::from("CompoundAssignOperator"),
        ConditionalOperator => String::from("ConditionalOperator"),
        CStyleCastExpr => String::from("CStyleCastExpr"),
        CompoundLiteralExpr => String::from("CompoundLiteralExpr"),
        InitListExpr => String::from("InitListExpr"),
        AddrLabelExpr => String::from("AddrLabelExpr"),
        StmtExpr => String::from("StmtExpr"),
        GenericSelectionExpr => String::from("GenericSelectionExpr"),
        GNUNullExpr => String::from("GNUNullExpr"),
        StaticCastExpr => String::from("StaticCastExpr"),
        DynamicCastExpr => String::from("DynamicCastExpr"),
        ReinterpretCastExpr => String::from("ReinterpretCastExpr"),
        ConstCastExpr => String::from("ConstCastExpr"),
        FunctionalCastExpr => String::from("FunctionalCastExpr"),
        TypeidExpr => String::from("TypeidExpr"),
        BoolLiteralExpr => String::from("BoolLiteralExpr"),
        NullPtrLiteralExpr => String::from("NullPtrLiteralExpr"),
        ThisExpr => String::from("ThisExpr"),
        ThrowExpr => String::from("ThrowExpr"),
        NewExpr => String::from("NewExpr"),
        DeleteExpr => String::from("DeleteExpr"),
        UnaryExpr => String::from("UnaryExpr"),
        ObjCStringLiteral => String::from("ObjCStringLiteral"),
        ObjCEncodeExpr => String::from("ObjCEncodeExpr"),
        ObjCSelectorExpr => String::from("ObjCSelectorExpr"),
        ObjCProtocolExpr => String::from("ObjCProtocolExpr"),
        ObjCBridgedCastExpr => String::from("ObjCBridgedCastExpr"),
        PackExpansionExpr => String::from("PackExpansionExpr"),
        SizeOfPackExpr => String::from("SizeOfPackExpr"),
        LambdaExpr => String::from("LambdaExpr"),
        ObjCBoolLiteralExpr => String::from("ObjCBoolLiteralExpr"),
        ObjCSelfExpr => String::from("ObjCSelfExpr"),
        OmpArraySectionExpr => String::from("OmpArraySectionExpr"),
        ObjCAvailabilityCheckExpr => String::from("ObjCAvailabilityCheckExpr"),
        FixedPointLiteral => String::from("FixedPointLiteral"),
        UnexposedStmt => String::from("UnexposedStmt"),
        LabelStmt => String::from("LabelStmt"),
        CompoundStmt => String::from("CompoundStmt"),
        CaseStmt => String::from("CaseStmt"),
        DefaultStmt => String::from("DefaultStmt"),
        IfStmt => String::from("IfStmt"),
        SwitchStmt => String::from("SwitchStmt"),
        WhileStmt => String::from("WhileStmt"),
        DoStmt => String::from("DoStmt"),
        ForStmt => String::from("ForStmt"),
        GotoStmt => String::from("GotoStmt"),
        IndirectGotoStmt => String::from("IndirectGotoStmt"),
        ContinueStmt => String::from("ContinueStmt"),
        BreakStmt => String::from("BreakStmt"),
        ReturnStmt => String::from("ReturnStmt"),
        AsmStmt => String::from("AsmStmt"),
        ObjCAtTryStmt => String::from("ObjCAtTryStmt"),
        ObjCAtCatchStmt => String::from("ObjCAtCatchStmt"),
        ObjCAtFinallyStmt => String::from("ObjCAtFinallyStmt"),
        ObjCAtThrowStmt => String::from("ObjCAtThrowStmt"),
        ObjCAtSynchronizedStmt => String::from("ObjCAtSynchronizedStmt"),
        ObjCAutoreleasePoolStmt => String::from("ObjCAutoreleasePoolStmt"),
        ObjCForCollectionStmt => String::from("ObjCForCollectionStmt"),
        CatchStmt => String::from("CatchStmt"),
        TryStmt => String::from("TryStmt"),
        ForRangeStmt => String::from("ForRangeStmt"),
        SehTryStmt => String::from("SehTryStmt"),
        SehExceptStmt => String::from("SehExceptStmt"),
        SehFinallyStmt => String::from("SehFinallyStmt"),
        SehLeaveStmt => String::from("SehLeaveStmt"),
        MsAsmStmt => String::from("MsAsmStmt"),
        NullStmt => String::from("NullStmt"),
        DeclStmt => String::from("DeclStmt"),
        OmpParallelDirective => String::from("OmpParallelDirective"),
        OmpSimdDirective => String::from("OmpSimdDirective"),
        OmpForDirective => String::from("OmpForDirective"),
        OmpSectionsDirective => String::from("OmpSectionsDirective"),
        OmpSectionDirective => String::from("OmpSectionDirective"),
        OmpSingleDirective => String::from("OmpSingleDirective"),
        OmpParallelForDirective => String::from("OmpParallelForDirective"),
        OmpParallelSectionsDirective => String::from("OmpParallelSectionsDirective"),
        OmpTaskDirective => String::from("OmpTaskDirective"),
        OmpMasterDirective => String::from("OmpMasterDirective"),
        OmpCriticalDirective => String::from("OmpCriticalDirective"),
        OmpTaskyieldDirective => String::from("OmpTaskyieldDirective"),
        OmpBarrierDirective => String::from("OmpBarrierDirective"),
        OmpTaskwaitDirective => String::from("OmpTaskwaitDirective"),
        OmpFlushDirective => String::from("OmpFlushDirective"),
        OmpOrderedDirective => String::from("OmpOrderedDirective"),
        OmpAtomicDirective => String::from("OmpAtomicDirective"),
        OmpForSimdDirective => String::from("OmpForSimdDirective"),
        OmpParallelForSimdDirective => String::from("OmpParallelForSimdDirective"),
        OmpTargetDirective => String::from("OmpTargetDirective"),
        OmpTeamsDirective => String::from("OmpTeamsDirective"),
        OmpTaskgroupDirective => String::from("OmpTaskgroupDirective"),
        OmpCancellationPointDirective => String::from("OmpCancellationPointDirective"),
        OmpCancelDirective => String::from("OmpCancelDirective"),
        OmpTargetDataDirective => String::from("OmpTargetDataDirective"),
        OmpTaskLoopDirective => String::from("OmpTaskLoopDirective"),
        OmpTaskLoopSimdDirective => String::from("OmpTaskLoopSimdDirective"),
        OmpDistributeDirective => String::from("OmpDistributeDirective"),
        OmpTargetEnterDataDirective => String::from("OmpTargetEnterDataDirective"),
        OmpTargetExitDataDirective => String::from("OmpTargetExitDataDirective"),
        OmpTargetParallelDirective => String::from("OmpTargetParallelDirective"),
        OmpTargetParallelForDirective => String::from("OmpTargetParallelForDirective"),
        OmpTargetUpdateDirective => String::from("OmpTargetUpdateDirective"),
        OmpDistributeParallelForDirective => String::from("OmpDistributeParallelForDirective"),
        OmpDistributeParallelForSimdDirective => String::from("OmpDistributeParallelForSimdDirective"),
        OmpDistributeSimdDirective => String::from("OmpDistributeSimdDirective"),
        OmpTargetParallelForSimdDirective => String::from("OmpTargetParallelForSimdDirective"),
        OmpTargetSimdDirective => String::from("OmpTargetSimdDirective"),
        OmpTeamsDistributeDirective => String::from("OmpTeamsDistributeDirective"),
        OmpTeamsDistributeSimdDirective => String::from("OmpTeamsDistributeSimdDirective"),
        OmpTeamsDistributeParallelForSimdDirective => String::from("OmpTeamsDistributeParallelForSimdDirective"),
        OmpTeamsDistributeParallelForDirective => String::from("OmpTeamsDistributeParallelForDirective"),
        OmpTargetTeamsDirective => String::from("OmpTargetTeamsDirective"),
        OmpTargetTeamsDistributeDirective => String::from("OmpTargetTeamsDistributeDirective"),
        OmpTargetTeamsDistributeParallelForDirective => String::from("OmpTargetTeamsDistributeParallelForDirective"),
        OmpTargetTeamsDistributeParallelForSimdDirective => String::from("OmpTargetTeamsDistributeParallelForSimdDirective"),
        OmpTargetTeamsDistributeSimdDirective => String::from("OmpTargetTeamsDistributeSimdDirective"),
        BitCastExpr => String::from("BitCastExpr"),
        OmpMasterTaskLoopDirective => String::from("OmpMasterTaskLoopDirective"),
        OmpParallelMasterTaskLoopDirective => String::from("OmpParallelMasterTaskLoopDirective"),
        OmpMasterTaskLoopSimdDirective => String::from("OmpMasterTaskLoopSimdDirective"),
        OmpParallelMasterTaskLoopSimdDirective => String::from("OmpParallelMasterTaskLoopSimdDirective"),
        OmpParallelMasterDirective => String::from("OmpParallelMasterDirective"),
        TranslationUnit => String::from("TranslationUnit"),
        UnexposedAttr => String::from("UnexposedAttr"),
        IbActionAttr => String::from("IbActionAttr"),
        IbOutletAttr => String::from("IbOutletAttr"),
        IbOutletCollectionAttr => String::from("IbOutletCollectionAttr"),
        FinalAttr => String::from("FinalAttr"),
        OverrideAttr => String::from("OverrideAttr"),
        AnnotateAttr => String::from("AnnotateAttr"),
        AsmLabelAttr => String::from("AsmLabelAttr"),
        PackedAttr => String::from("PackedAttr"),
        PureAttr => String::from("PureAttr"),
        ConstAttr => String::from("ConstAttr"),
        NoDuplicateAttr => String::from("NoDuplicateAttr"),
        CudaConstantAttr => String::from("CudaConstantAttr"),
        CudaDeviceAttr => String::from("CudaDeviceAttr"),
        CudaGlobalAttr => String::from("CudaGlobalAttr"),
        CudaHostAttr => String::from("CudaHostAttr"),
        CudaSharedAttr => String::from("CudaSharedAttr"),
        VisibilityAttr => String::from("VisibilityAttr"),
        DllExport => String::from("DllExport"),
        DllImport => String::from("DllImport"),
        NSReturnsRetained => String::from("NSReturnsRetained"),
        NSReturnsNotRetained => String::from("NSReturnsNotRetained"),
        NSReturnsAutoreleased => String::from("NSReturnsAutoreleased"),
        NSConsumesSelf => String::from("NSConsumesSelf"),
        NSConsumed => String::from("NSConsumed"),
        ObjCException => String::from("ObjCException"),
        ObjCNSObject => String::from("ObjCNSObject"),
        ObjCIndependentClass => String::from("ObjCIndependentClass"),
        ObjCPreciseLifetime => String::from("ObjCPreciseLifetime"),
        ObjCReturnsInnerPointer => String::from("ObjCReturnsInnerPointer"),
        ObjCRequiresSuper => String::from("ObjCRequiresSuper"),
        ObjCRootClass => String::from("ObjCRootClass"),
        ObjCSubclassingRestricted => String::from("ObjCSubclassingRestricted"),
        ObjCExplicitProtocolImpl => String::from("ObjCExplicitProtocolImpl"),
        ObjCDesignatedInitializer => String::from("ObjCDesignatedInitializer"),
        ObjCRuntimeVisible => String::from("ObjCRuntimeVisible"),
        ObjCBoxable => String::from("ObjCBoxable"),
        FlagEnum => String::from("FlagEnum"),
        ConvergentAttr => String::from("ConvergentAttr"),
        WarnUnusedAttr => String::from("WarnUnusedAttr"),
        WarnUnusedResultAttr => String::from("WarnUnusedResultAttr"),
        AlignedAttr => String::from("AlignedAttr"),
        PreprocessingDirective => String::from("PreprocessingDirective"),
        MacroDefinition => String::from("MacroDefinition"),
        MacroExpansion => String::from("MacroExpansion"),
        InclusionDirective => String::from("InclusionDirective"),
        ModuleImportDecl => String::from("ModuleImportDecl"),
        TypeAliasTemplateDecl => String::from("TypeAliasTemplateDecl"),
        StaticAssert => String::from("StaticAssert"),
        FriendDecl => String::from("FriendDecl"),
        OverloadCandidate => String::from("OverloadCandidate"),
    } 
}